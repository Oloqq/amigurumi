use super::{
    common::{Output, Program},
    execution::Runtime,
    problem::shape::compare_shapes,
};

pub type FitnessFunc = fn(expected: &Output, actual: &Output, runtime: &Runtime) -> f32;

pub fn shape_fitness(expected: &Output, actual: &Output, _runtime: &Runtime) -> f32 {
    -compare_shapes(expected, actual) / actual.point_count() as f32
}

#[cfg(test)]
mod tests {
    use crate::genetic::{params::Params, problem::Shape};

    use super::*;

    #[test]
    fn test_not_nan() {
        let expected = Shape::deserialize("((slices ((points #(0.0 0.0) #(1.0370732545852661 0.16832482814788818) #(0.3626309931278229 0.9649794697761536) #(-0.6713116765022278 0.7671818733215332) #(-0.9795358180999756 -0.24443238973617554) #(-0.20618222653865814 -0.9754517078399658) #(0.8123244047164917 -0.6164188981056213) #(1.8622831106185913 -0.36430859565734863) #(1.771036148071289 0.6917761564254761) #(1.0809674263000488 1.5136666297912598) #(-1.8014512062072754 0.048762451857328415) #(-1.5990841388702393 -0.8748334050178528) #(-0.9148672223091125 -1.6198663711547852) #(1.0459930896759033 -1.60722815990448))) ((points #(0.1391845941543579 1.8153983354568481) #(-0.8186516761779785 1.6043086051940918) #(-1.5066481828689575 0.9558443427085876) #(0.017340751364827156 -1.8988109827041626) #(1.719159483909607 -0.8670483231544495) #(1.9100182056427002 -0.24047932028770447))) ((points #(0.0 0.0) #(1.051469326019287 0.050035685300827026) #(0.4086257517337799 0.9298886656761169) #(-0.6574125289916992 0.7871421575546265) #(-1.0088989734649658 -0.22092916071414948) #(-0.2897500693798065 -1.0056363344192505) #(0.7394233345985413 -0.7626538276672363) #(1.7637890577316284 0.7458588480949402) #(1.0802783966064453 1.5594780445098877) #(0.14675569534301758 1.8437340259552002) #(-0.8370081186294556 1.6316713094711304) #(-1.5177487134933472 0.969258189201355) #(-1.8106709718704224 0.056834932416677475) #(-1.5908066034317017 -0.8665260076522827) #(-0.9314887523651123 -1.594927191734314) #(0.0070693097077310085 -1.8701815605163574) #(1.0420844554901123 -1.6018075942993164) #(1.7219089269638062 -0.7880350947380066)))))");
        let program =
            Program::deserialize("(Dec Dec Dec Dec Dec Sc Inc Dec Dec Dec Dec Dec)").unwrap();
        let params = Params::default();
        let mut runtime = Runtime::new(&params);
        let output = runtime.execute(&program);
        let fitness = shape_fitness(&expected, &output, &runtime);
        assert!(!fitness.is_nan());
    }
}
